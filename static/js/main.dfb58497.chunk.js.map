{"version":3,"sources":["redux/gradients-reducer.js","validators/validators.js","components/common/FormsControls.js","components/GradientsForm/GradientsForm.jsx","components/Gradient/Gradient.jsx","components/Main.jsx","App.js","serviceWorker.js","redux/redux-store.js","index.js","components/GradientsForm/GradientsForm.module.css","components/common/FormsControls.module.css","components/Gradient/Gradient.module.css","components/Main.module.css"],"names":["initialState","gradientsList","gradientsReducer","state","action","type","newGradient","firstGrad","secondGrad","id","length","filter","el","requiredField","val","undefined","isHex","match","Input","input","meta","props","hasError","touched","error","className","c","formControl","ReduxGradientsForm","reduxForm","form","onSubmit","handleSubmit","Field","component","name","placeholder","validate","button","Gradient","removeGradient","cardWrap","style","background","deleteBtn","onClick","connect","gradientsPage","dispatch","addGradient","obj","reset","mainWrap","formData","map","key","App","Boolean","window","location","hostname","reducers","combineReducers","formReducer","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.dfb58497.chunk.js","sourcesContent":["const ADD_GRADIENT = 'ADD_GRADIENT';\nconst REMOVE_GRADIENT = 'REMOVE_GRADIENT';\n\nlet initialState = {\n    gradientsList: []\n}\n\nconst gradientsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_GRADIENT:\n            let newGradient = {\n                firstGrad: action.firstGrad,\n                secondGrad: action.secondGrad,\n                id: state.gradientsList[0] ? state.gradientsList[state.gradientsList.length - 1].id + 1 : 1\n            }\n            return {\n                ...state,\n                gradientsList: [...state.gradientsList, newGradient]\n            }\n        case REMOVE_GRADIENT:\n            debugger;\n            return {\n                ...state,\n                gradientsList: state.gradientsList.filter(el => el.id !== action.id)\n            }\n        default:\n            return state;\n    }\n}\n\nexport const addGradient = ({firstGrad, secondGrad}) => ({\n    type: ADD_GRADIENT,\n    firstGrad,\n    secondGrad\n});\n\nexport const removeGradient = (id) => {\ndebugger\n    return {\n    type: REMOVE_GRADIENT,\n    id\n}};\n\nexport default gradientsReducer;","export const requiredField = (val) => {\n    return val ? undefined : 'Field is required'\n}\n\nexport const isHex = (val) => {\n    return (val.match(/^#([a-f0-9]{6}|[a-f0-9]{3})$/gi)) ? undefined : 'Incorrect input data'\n}","import React from 'react';\nimport c from './FormsControls.module.css'\n\nexport const Input = ({input, meta, ...props}) => {\n    const hasError = meta.touched && meta.error;\n    return (\n        <div className={c.formControl + ' ' + (hasError ? c.error : '')}>\n            <input {...input} {...props}/>\n                {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport c from './GradientsForm.module.css'\nimport { requiredField, isHex } from '../../validators/validators';\nimport { Input } from '../common/FormsControls';\n\nconst GradientsForm = (props) => {\n    return <form onSubmit={props.handleSubmit} className={c.form}>\n        <Field component={Input} name={'firstGrad'} placeholder={'#000000'} className={c.input} validate={[requiredField, isHex]}/>\n        <Field component={Input} name={'secondGrad'} placeholder={'#000000'} className={c.input} validate={[requiredField, isHex]}/>\n        <button className={c.button}>add gradient</button>\n    </form>\n}\n\nconst ReduxGradientsForm = reduxForm ({form: 'gradientsForm'})(GradientsForm);\n\nexport default ReduxGradientsForm;","import React from 'react'\nimport c from './Gradient.module.css'\n\nconst Gradient = ({firstGrad, secondGrad, id, removeGradient,}) => {\n    return <div className={c.cardWrap} style={{background: `linear-gradient(90deg, ${firstGrad}, ${secondGrad})`}}>\n            <span>\n                {firstGrad}\n            </span>\n            <span>\n                {secondGrad}\n            </span>\n        <span className={c.deleteBtn} onClick={() => removeGradient(id)}>&times;</span>\n    </div>\n}\n\nexport default Gradient;","import React from 'react';\nimport { connect } from 'react-redux';\nimport {addGradient, removeGradient} from '../redux/gradients-reducer'\nimport ReduxGradientsForm from './GradientsForm/GradientsForm';\nimport c from './Main.module.css';\nimport { reset } from 'redux-form';\nimport Gradient from './Gradient/Gradient';\n\nconst Main = (props) => {\n\n    const onSubmit = (formData) => {\n        props.addGradient(formData);\n    }\n\n    return <div className={c.mainWrap}>\n        <ReduxGradientsForm onSubmit={onSubmit}/>\n        {props.gradientsList.map(val => {\n            return <Gradient {...val} removeGradient={props.removeGradient}key={val.id}/>\n        })}\n        \n    </div>\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        gradientsList: state.gradientsPage.gradientsList\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addGradient: (obj) => {\n            dispatch(addGradient(obj));\n            dispatch(reset('gradientsForm'));\n        },\n        removeGradient: (id) => {\n            dispatch(removeGradient(id))\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);","import React from 'react';\nimport Main from './components/Main.jsx'\nimport './App.css';\n\nconst App = () => {\n  return ( <div>\n    <Main />\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore, combineReducers} from 'redux';\nimport gradientsReducer from './gradients-reducer'\nimport {reducer as formReducer} from 'redux-form'\n\nlet reducers = combineReducers({\n    gradientsPage: gradientsReducer,\n    form: formReducer\n})\n\nlet store = createStore(reducers);\n\nwindow.store = store;\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/redux-store'\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"GradientsForm_form__s_gny\",\"input\":\"GradientsForm_input__e3VeV\",\"button\":\"GradientsForm_button__o4YW1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__LP_D7\",\"error\":\"FormsControls_error__eaQdC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardWrap\":\"Gradient_cardWrap__3VvIM\",\"deleteBtn\":\"Gradient_deleteBtn__BBl1e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrap\":\"Main_mainWrap__O_JXb\"};"],"sourceRoot":""}